;(define board (list (list 0 0 0) (list 0 0 0) (list 0 0 0)))

(define field00 0)
(define field01 0)
(define field02 0)
(define field10 0)
(define field11 0)
(define field12 0)
(define field20 0)
(define field21 0)
(define field22 0)

(define (is-valid-input input)
	(if (eq? input "1")
		#t
	;else
		(if (eq? input "2")
			#t
		;else
			(if (eq? input "3")
				#t
			;else
				#f
			)
		)
	)
)

(define (is-input-free row col)
	(if (eq? row 1)
		(if (eq? col 1)
			(eq? field00 0)
		;else
			(if (eq? col 2)
				(eq? field01 0)
			;else
				(eq? field02 0)
			)
		)
	;else
		(if (eq? row 2)
			(if (eq? col 1)
				(eq? field10 0)
			;else
				(if (eq? col 2)
					(eq? field11)
				;else
					(eq? field12)
				)
			)
		;else (row 3)
			(if (eq? col 1)
				(eq? field20 0)
			;else
				(if (eq? col 2)
					(eq? field21 0)
				;else
					(eq? field22 0)
				)
			)
		)
	)
)
			
)

(define (convert-input-to-number input)
	(if (eq? input "1")
		1
	;else
		(if (eq? input "2")
			2
		;else
			(if (eq? input "3")
				3
			;else
				#f
			)
		)
	)
)

(define (get-row-input)
	(display "Enter the row you want to place your symbol in: ")
	(define row (read-line))
	(if (is-valid-input row)
		(begin
			(display "Chosen row: ")
			(display row)
			(convert-input-to-number row)
		)
	;else
		(begin
			(display "Row enterd is not a valid row. Please enter a number in the range 1-3.\n")
			(get-row-input)
		)
	)
)

(define (get-col-input)
	(display "Enter the column you want to place your symbol in: ")
	(define col (read-line))
	(if (is-valid-input col)
		(begin
			(display "Chosen col: ")
			(display col)
			(convert-input-to-number col)
		)
	;else
		(begin
			(display "Columg enterd is not a valid column. Please enter a number in the range 1-3.\n")
			(get-row-input)
		)
	)
)

(define (print-separation-line)
	(display "-----\n")
)

(define (print-board-row field0 field1 field2)
	(if (eq? field0 0)
		(display " |")
	;else
		(if (eq? field0 1)
			(display "O|")
		;else
			(display "X|")
		)
	)
	(if (eq? field1 0)
		(display " |")
	;else
		(if (eq? field1 1)
			(display "O|")
		;else
			(display "X|")
		)
	)
	(if (eq? field2 0)
		(display " ")
	;else
		(if (eq? field2 1)
			(display "O")
		;else
			(display "X")
		)
	)
	(display "\n")
)

(define (print-board)
	(display "\n")
	(print-board-row field00 field01 field02)
	(print-separation-line)
	(print-board-row field10 field11 field12)
	(print-separation-line)
	(print-board-row field20 field21 field22)
)

(define (get-input)
	(define row (get-row-input))
	(define col (get-col-input))
	(if (is-input-free row col)
		(cons row col)
	;else
		(begin
			(display "Field is already taken. Please choose a different field.")
			(get-input))
		)
	)
)

(define (make-next-move player)
	(display "Player ")
	(display player)
	(display "'s turn.\n")
	(define row_col (get-input))

(define (main)
	(define winState (check_win_state))
	(if (> winState 0)
		(if (eq? winState 1)
			(print "Player 1 won.")
		;else
			(print "Player 2 won.")
		)
	;else
		(main) ; Call main recursively until a player has won.
	)
)

(define (check_win_state)
	(print "Check win state")
)

(print-board)